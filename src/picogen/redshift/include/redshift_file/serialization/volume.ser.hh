//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~// Copyright (C) 2010  Sebastian Mach (*1983)// * mail: phresnel/at/gmail/dot/com// * http://phresnel.org// * http://picogen.org//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// (at your option) any later version.//// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License// along with this program.  If not, see <http://www.gnu.org/licenses/>.//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#ifndef VOLUME_SER_HH_20101013#define VOLUME_SER_HH_20101013#include "../volume.hh"#include "normal.ser.hh"#include "point.ser.hh"namespace picogen { namespace redshift_file {        // Serialization.        template<typename Arch>        void Volume::serialize (Arch &arch) {                using actuarius::pack;                arch & actuarius::push_optional(true);                switch (type) {                case homogeneous:                        arch & pack("absorption", sigma_a);                        arch & pack("out-scatter", sigma_s);                        arch & pack("emission", Lve);                        arch & pack("phase-function", hg);                        break;                case exponential:                        arch & pack("absorption", sigma_a);                        arch & pack("out-scatter", sigma_s);                        arch & pack("emission", Lve);                        arch & pack("phase-function", hg);                        arch & pack("up", up);                        arch & pack("min", min);                        arch & pack("base-factor", baseFactor);                        arch & pack("exponent-factor", exponentFactor);                        arch & pack("epsilon", epsilon);                        break;                };                arch & actuarius::pop_optional;        }} }#endif // VOLUME_SER_HH_20101013