/***************************************************************************
 *            MkheightmapWxDialog.h
 *
 *  Copyright  2008  Sebastian Mach
 *  phresnel@gmail.com
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; version 3 of the License, or (at your
 *  option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
 
 
#ifndef __MkheightmapWxDialog__
#define __MkheightmapWxDialog__

#define wxUSE_ABOUTDLG 1
//#include <wx/aboutdlg.h>
//#include <wx/generic/aboutdlgg.h>

#include <wx/stdpaths.h>
#include <wx/file.h>

#include <picogen/picogen.h>
#include <picogen/misc/picossdf.h>

#include <foreign/SciLexer.h>

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>

#include <boost/serialization/nvp.hpp>
#include <boost/serialization/utility.hpp>
#include <boost/serialization/list.hpp>
#include <boost/serialization/vector.hpp>
#include <boost/serialization/version.hpp>
#include <boost/serialization/split_member.hpp>

#include <boost/config.hpp>
#if defined(BOOST_NO_STDC_NAMESPACE)
namespace std{ 
    using ::remove;
}
#endif

#include <boost/archive/tmpdir.hpp>
#include <boost/archive/xml_iarchive.hpp>
#include <boost/archive/xml_oarchive.hpp>


/**
@file
Subclass of MkheightmapWxDialogGui, which is generated by wxFormBuilder.
*/

#include "auto/mkheightmap_wx_gui.h"

/** Implementing MkheightmapWxDialogGui */
class MkheightmapWxDialog : public MkheightmapWxDialogGui
{
private:
    void UpdateTextWithTemplate (const wxString &tpl);

    

    template <typename T> void GetYprOrientation (T &yaw, T &pitch, T &roll) const {        
        T deg_yaw   = +static_cast<T>(ypr_yaw->GetValue ()) + 0.01f * static_cast<float>(ypr_yaw_fine->GetValue ());
        T deg_pitch = -static_cast<T>(ypr_pitch->GetValue ())  + 0.01f * static_cast<float>(ypr_pitch_fine->GetValue ());
        T deg_roll  = -static_cast<T>(ypr_roll->GetValue ()) + 0.01f * static_cast<float>(ypr_roll_fine->GetValue ());
        
        const T to_radian = 0.0174532925;
        yaw   = deg_yaw * to_radian;
        pitch = deg_pitch * to_radian;
        roll  = deg_roll * to_radian;
    }
    
    
    
    template <typename T> void GetYprPosition (T &x, T &y, T &z) const {
        using namespace std;
        {
            stringstream ss;
            ss << ypr_x->GetValue().mb_str() << flush;
            ss >> x;
        }        
        {
            stringstream ss;
            ss << ypr_y->GetValue().mb_str() << flush;
            ss >> y;
        }        
        {
            stringstream ss;
            ss << ypr_z->GetValue().mb_str() << flush;
            ss >> z;    
        }
    }
    
    
    
    template <typename T> void ObtainSunSkyParams (
        T atmoRGB [3], 
        bool &fogEnable, T &fogDensity, T &fogMaxRange,
        T &turbidity,
        T &sunDiskSize,
        bool &falloffEnable, T falloffParameters [3],
        T sunRGB [3], T sunDir [3]
    ) const {
        // ATMOSPHERE
        
        // Atmosphere Color Filter.
        const T atmoIntensity = static_cast <T> (atmosphereIntensity->GetValue ()) * 0.001f;
        atmoRGB [0] = static_cast <T> (atmosphereR->GetValue ()) * atmoIntensity * 0.01f;
        atmoRGB [1] = static_cast <T> (atmosphereG->GetValue ()) * atmoIntensity * 0.01f;
        atmoRGB [2] = static_cast <T> (atmosphereB->GetValue ()) * atmoIntensity * 0.01f;
        
        // Fog.
        fogEnable = this->fogEnable->IsChecked ();
        fogDensity  = static_cast <T> (this->fogDensity->GetValue ()) * 0.0000001; // / 10k
        fogMaxRange = static_cast <T> (this->fogMaxRange->GetValue ());
        
        // Turbidity.
        turbidity = static_cast <T> (turbidityA->GetValue ()) + 0.01 * static_cast <T> (turbidityB->GetValue ());
        
        // SUN    
        // Disk Size.
        sunDiskSize = static_cast <T> (this->diskSize->GetValue ()) * 0.01;
        
        // Falloff.
        falloffParameters [0]   = static_cast <T> (this->falloffParameterA->GetValue ()) * 0.1;
        falloffParameters [1]   = static_cast <T> (this->falloffParameterB->GetValue ()) * 0.00001;
        falloffParameters [2]   = static_cast <T> (this->falloffParameterC->GetValue ()) * 0.1;
        falloffEnable = this->falloffEnable->IsChecked ();
        //falloffExponent = static_cast <T> (this->falloffExponent->GetValue ());
        
        // Sun Color.
        const T sunIntensity = static_cast <T> (this->sunIntensity->GetValue ());
        sunRGB [0] = static_cast <T> (sunR->GetValue ()) * sunIntensity * 0.01f;
        sunRGB [1] = static_cast <T> (sunG->GetValue ()) * sunIntensity * 0.01f;
        sunRGB [2] = static_cast <T> (sunB->GetValue ()) * sunIntensity * 0.01f;
        
        // Sun Direction (mkskymap will normalise it for us).
        const T to_radian = 0.0174532925f;
        const T pi = 3.14159265;
        const T sunPhi   = to_radian * static_cast <T> (this->sunPhi->GetValue()) + 0.5*pi;
        const T sunTheta = to_radian * static_cast <T> (this->sunTheta->GetValue());
        sunDir [0] = sin (sunTheta) * cos (sunPhi);
        sunDir [1] = cos (sunTheta);
        sunDir [2] = sin (sunTheta) * sin (sunPhi);
    }
    
    

    bool ShowSaveFileDlg();

    std::string generateSceneTempFile (bool withPreviewSettings) const;    
    wxString pwsFilename;

protected:
	// Handlers for MkheightmapWxDialogGui events.
	void OnSave ( wxCommandEvent& event );
	void OnShowHeightmap( wxCommandEvent& event );
	void OnShowShadedHeightmap( wxCommandEvent& event );
	void OnClose( wxCommandEvent& event );
	void OnRender ( wxCommandEvent& event );
	void OnAutoformat( wxCommandEvent& event );
	void OnOpenSaveFile( wxCommandEvent& event );
	void OnQuickPreview( wxCommandEvent& event );
	void OnShowHemisphere( wxCommandEvent& event );
    void OnFastHsMakeChoice ( wxCommandEvent& event );
    void OnFastColorMakeChoice ( wxCommandEvent& event );
	void OnFast1MakeChoice ( wxCommandEvent& event );
	void OnFast11MakeChoice ( wxCommandEvent& event );
	void OnFast2MakeChoice ( wxCommandEvent& event );
	void OnFast21MakeChoice ( wxCommandEvent& event );
	void OnFast3MakeChoice ( wxCommandEvent& event );
	void OnFast31MakeChoice ( wxCommandEvent& event );
	void OnFast4MakeChoice ( wxCommandEvent& event );
	void OnFast41MakeChoice ( wxCommandEvent& event );
	void OnFast5MakeChoice ( wxCommandEvent& event );
	void OnFast51MakeChoice ( wxCommandEvent& event );
	void OnFast6MakeChoice ( wxCommandEvent& event );
	void OnPresets1 ( wxCommandEvent& event );
    void OnMenu_Execute (wxCommandEvent& event);
    void OnMenu_Copyright (wxCommandEvent& event);
	
public:
	/** Constructor */
	MkheightmapWxDialog( wxWindow* parent );
};


#endif // __MkheightmapWxDialog__
